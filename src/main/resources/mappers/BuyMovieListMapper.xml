<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="BuyMovieListMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="buyMovieListMap" type="study.spring.clip.model.BuyMovieList">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="buy_movie_list_no" column="buy_movie_list_no" />
        <result property="date" column="date" />
        <result property="is_delete" column="is_delete" />
        <result property="user_no" column="user_no" />
        <result property="movie_no" column="movie_no" />
        <result property="name" column="name" />
        <result property="price" column="price" />
        <result property="thumbnail" column="thumbnail" />
        <result property="coin" column="coin" />
        <result property="runtime" column="runtime" />
        <result property="type" column="type" />
        <result property="end_date" column="end_date" />
        <result property="age" column="age" />
    </resultMap>
    
    <!-- 기능 정의 -->
	
	<!-- user_no로 구매한 영화 리스트 조회 -->
    <select id="buyList"
		parameterType="study.spring.clip.model.BuyMovieList"
		resultMap="buyMovieListMap">
		SELECT m.movie_no, IF(age='12', '12세 이용가', IF(age='15', '15세 이용가', IF(age='19', '청소년 관람 불가', '전체 이용가'))) as age, is_delete, IF(m.type = 'B', "구매", "대여") AS type, runtime, DATE_ADD(date, INTERVAL 1 WEEK) AS end_date, thumbnail, name, b.price, date, buy_movie_list_no
		FROM movie m, buy_movie_list b 
		WHERE b.movie_no = m.movie_no 
		AND user_no = #{user_no};
	</select>
	
	<!-- 파라미터값으로 받아온 값이 db값과 일치하는지 확인하는 작업 -->
	<select id="checkList"
		parameterType="study.spring.clip.model.BuyMovieList"
		resultMap="buyMovieListMap">
		SELECT * FROM buy_movie_list WHERE user_no = #{user_no} AND buy_movie_list_no = #{buy_movie_list_no};
	</select>
	
	<!-- 환불할 영화가 시청했는지 확인하는 작업 -->
	<select id="checkWatched"
	 	parameterType="study.spring.clip.model.BuyMovieList"
	 	resultMap="buyMovieListMap">
	 	SELECT * FROM buy_movie_list WHERE user_no = #{user_no} AND buy_movie_list_no = #{buy_movie_list_no} AND is_watched = 'N';
	</select>
	
	<!-- 날짜 비교 하기 -->
	<select id="dateCheck"
		parameterType="study.spring.clip.model.BuyMovieList"
		resultMap="buyMovieListMap">
		SELECT * FROM buy_movie_list WHERE buy_movie_list_no = #{buy_movie_list_no} AND <![CDATA[DATE_ADD(date, INTERVAL 1 WEEK) <= now()]]>;
	</select>
	
	<!-- 영화 구매했을때 구매내역 추가 -->
	<insert id="insertItem"
		parameterType="study.spring.clip.model.BuyMovieList"
		useGeneratedKeys="true"
		keyProperty="buy_movie_list_no">
		INSERT INTO buy_movie_list (date, price, user_no, movie_no) VALUES (now(), #{price}, #{user_no}, #{movie_no});
	</insert>
	
	<!-- 영화 구매했을때 코인차감 -->
	<update id="userCoinEdit"
    	parameterType="study.spring.clip.model.BuyMovieList">
        UPDATE user SET coin = (#{coin} - #{price})
		WHERE user_no = #{user_no};
    </update>
    
    <!-- 영화 환불했을때 코인 상승 -->
    <update id="userMovieDelete"
    	parameterType="study.spring.clip.model.BuyMovieList">
        UPDATE user SET coin = (#{coin} + (SELECT price FROM buy_movie_list WHERE buy_movie_list_no = #{buy_movie_list_no}))
		WHERE user_no = #{user_no};
    </update>
    
    <!-- 보유중인 영화 판별하기 -->
	<select id="duplicateCheck"
		parameterType="study.spring.clip.model.BuyMovieList"
		resultMap="buyMovieListMap">
		SELECT * FROM buy_movie_list WHERE movie_no = #{movie_no} AND user_no = #{user_no} AND is_delete != 'D';
	</select>
    
    <!-- 대여기간 지난 영화 구매내역에만 남게 하기 -->
    <update id="userMovieEnd"
    	parameterType="study.spring.clip.model.BuyMovieList">
        UPDATE buy_movie_list SET is_delete = 'D'
		WHERE <![CDATA[DATE_ADD(date, INTERVAL 1 WEEK) <= now()]]> AND movie_no IN (SELECT movie_no FROM movie WHERE type = 'R');
    </update>
    
    <!-- 영화 시청했을때 -->
    <update id="watchMovie"
    	parameterType="study.spring.clip.model.BuyMovieList">
        UPDATE buy_movie_list SET is_watched = 'Y'
		WHERE buy_movie_list_no = #{buy_movie_list_no};
    </update>
    
    <!-- 영화 휴지통으로 -->
   	<update id="goRemove"
    	parameterType="study.spring.clip.model.BuyMovieList">
        UPDATE buy_movie_list SET is_delete = 'Y'
		WHERE buy_movie_list_no = #{buy_movie_list_no};
    </update>
    
    <!-- 영화 복원 -->
   	<update id="restoreMovie"
    	parameterType="study.spring.clip.model.BuyMovieList">
        UPDATE buy_movie_list SET is_delete = 'N'
		WHERE buy_movie_list_no = #{buy_movie_list_no};
    </update>
    
    <!-- 해당 영화 환불 -->
    <delete id="deleteItem"
		parameterType="study.spring.clip.model.BuyMovieList">
		DELETE FROM buy_movie_list WHERE user_no = #{user_no} AND buy_movie_list_no = #{buy_movie_list_no};	
	</delete>
	
	<!-- 행 삭제 -->
	<delete id="deleteList" 
		parameterType="study.spring.clip.model.BuyMovieList">
		DELETE FROM buy_movie_list WHERE user_no = #{user_no};
	</delete>
    
</mapper>